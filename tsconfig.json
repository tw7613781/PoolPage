{
    "compilerOptions": {
        "module": "commonjs",
        "esModuleInterop": true,
        "target": "es6",
        "noImplicitAny": false,
        "moduleResolution": "node",
        "sourceMap": true,
        "outDir": "dist",
        "baseUrl": ".",
        "paths": {
            "*": [
                "node_modules/*",
                "src/types/*"
            ]
        },
        "lib": [
            "es2015"
        ]
    },
    "include": [
        "src/**/*",
        "sample/**/*"
    ]
}

// compilerOptions	Description
// "module": "commonjs"	The output module type (in your .js files). Node uses commonjs, so that is what we use
// "esModuleInterop": true,	Allows usage of an alternate module import syntax: import foo from 'foo';
// "target": "es6"	The output language level. Node supports ES6, so we can target that here
// "noImplicitAny": false    Any type is OK, (Enables a stricter setting which throws errors when something has a default any value)
// "moduleResolution": "node"	TypeScript attempts to mimic Node's module resolution strategy. Read more here
// "sourceMap": true	We want source maps to be output along side our JavaScript. See the debugging section
// "outDir": "dist"	Location to output .js files after compilation
// "baseUrl": "."	Part of configuring module resolution. See path mapping section
// paths: {...}	Part of configuring module resolution. See path mapping section

// "include" and "exclude" properties take a list of glob-like file patterns. The supported glob wildcards are:

// * matches zero or more characters (excluding directory separators)
// ? matches any one character (excluding directory separators)
// **/ recursively matches any subdirectory